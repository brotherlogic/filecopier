// Code generated by protoc-gen-go. DO NOT EDIT.
// source: filecopier.proto

/*
Package filecopier is a generated protocol buffer package.

It is generated from these files:
	filecopier.proto

It has these top-level messages:
	CopyRequest
	CopyResponse
	KeyRequest
	KeyResponse
	AcceptsRequest
	AcceptsResponse
*/
package filecopier

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CopyRequest struct {
	InputFile    string `protobuf:"bytes,1,opt,name=input_file,json=inputFile" json:"input_file,omitempty"`
	InputServer  string `protobuf:"bytes,2,opt,name=input_server,json=inputServer" json:"input_server,omitempty"`
	OutputFile   string `protobuf:"bytes,3,opt,name=output_file,json=outputFile" json:"output_file,omitempty"`
	OutputServer string `protobuf:"bytes,4,opt,name=output_server,json=outputServer" json:"output_server,omitempty"`
}

func (m *CopyRequest) Reset()                    { *m = CopyRequest{} }
func (m *CopyRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyRequest) ProtoMessage()               {}
func (*CopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CopyRequest) GetInputFile() string {
	if m != nil {
		return m.InputFile
	}
	return ""
}

func (m *CopyRequest) GetInputServer() string {
	if m != nil {
		return m.InputServer
	}
	return ""
}

func (m *CopyRequest) GetOutputFile() string {
	if m != nil {
		return m.OutputFile
	}
	return ""
}

func (m *CopyRequest) GetOutputServer() string {
	if m != nil {
		return m.OutputServer
	}
	return ""
}

type CopyResponse struct {
	MillisToCopy int64 `protobuf:"varint,1,opt,name=millis_to_copy,json=millisToCopy" json:"millis_to_copy,omitempty"`
}

func (m *CopyResponse) Reset()                    { *m = CopyResponse{} }
func (m *CopyResponse) String() string            { return proto.CompactTextString(m) }
func (*CopyResponse) ProtoMessage()               {}
func (*CopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CopyResponse) GetMillisToCopy() int64 {
	if m != nil {
		return m.MillisToCopy
	}
	return 0
}

type KeyRequest struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Server string `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
}

func (m *KeyRequest) Reset()                    { *m = KeyRequest{} }
func (m *KeyRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyRequest) ProtoMessage()               {}
func (*KeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type KeyResponse struct {
}

func (m *KeyResponse) Reset()                    { *m = KeyResponse{} }
func (m *KeyResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyResponse) ProtoMessage()               {}
func (*KeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AcceptsRequest struct {
}

func (m *AcceptsRequest) Reset()                    { *m = AcceptsRequest{} }
func (m *AcceptsRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptsRequest) ProtoMessage()               {}
func (*AcceptsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AcceptsResponse struct {
	Server []string `protobuf:"bytes,1,rep,name=server" json:"server,omitempty"`
}

func (m *AcceptsResponse) Reset()                    { *m = AcceptsResponse{} }
func (m *AcceptsResponse) String() string            { return proto.CompactTextString(m) }
func (*AcceptsResponse) ProtoMessage()               {}
func (*AcceptsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AcceptsResponse) GetServer() []string {
	if m != nil {
		return m.Server
	}
	return nil
}

func init() {
	proto.RegisterType((*CopyRequest)(nil), "filecopier.CopyRequest")
	proto.RegisterType((*CopyResponse)(nil), "filecopier.CopyResponse")
	proto.RegisterType((*KeyRequest)(nil), "filecopier.KeyRequest")
	proto.RegisterType((*KeyResponse)(nil), "filecopier.KeyResponse")
	proto.RegisterType((*AcceptsRequest)(nil), "filecopier.AcceptsRequest")
	proto.RegisterType((*AcceptsResponse)(nil), "filecopier.AcceptsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileCopierService service

type FileCopierServiceClient interface {
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	ReceiveKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
	Accepts(ctx context.Context, in *AcceptsRequest, opts ...grpc.CallOption) (*AcceptsResponse, error)
}

type fileCopierServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileCopierServiceClient(cc *grpc.ClientConn) FileCopierServiceClient {
	return &fileCopierServiceClient{cc}
}

func (c *fileCopierServiceClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := grpc.Invoke(ctx, "/filecopier.FileCopierService/Copy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) ReceiveKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := grpc.Invoke(ctx, "/filecopier.FileCopierService/ReceiveKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) Accepts(ctx context.Context, in *AcceptsRequest, opts ...grpc.CallOption) (*AcceptsResponse, error) {
	out := new(AcceptsResponse)
	err := grpc.Invoke(ctx, "/filecopier.FileCopierService/Accepts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileCopierService service

type FileCopierServiceServer interface {
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	ReceiveKey(context.Context, *KeyRequest) (*KeyResponse, error)
	Accepts(context.Context, *AcceptsRequest) (*AcceptsResponse, error)
}

func RegisterFileCopierServiceServer(s *grpc.Server, srv FileCopierServiceServer) {
	s.RegisterService(&_FileCopierService_serviceDesc, srv)
}

func _FileCopierService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_ReceiveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).ReceiveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/ReceiveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).ReceiveKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_Accepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).Accepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/Accepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).Accepts(ctx, req.(*AcceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileCopierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filecopier.FileCopierService",
	HandlerType: (*FileCopierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Copy",
			Handler:    _FileCopierService_Copy_Handler,
		},
		{
			MethodName: "ReceiveKey",
			Handler:    _FileCopierService_ReceiveKey_Handler,
		},
		{
			MethodName: "Accepts",
			Handler:    _FileCopierService_Accepts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecopier.proto",
}

func init() { proto.RegisterFile("filecopier.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x09, 0xa9, 0x8a, 0x7a, 0x93, 0x96, 0xe0, 0x81, 0x46, 0x41, 0x88, 0x62, 0x18, 0x60,
	0xe9, 0x00, 0x88, 0x85, 0x01, 0xa1, 0x22, 0x96, 0x6e, 0x81, 0x3d, 0x12, 0xd6, 0x45, 0xb2, 0x08,
	0xb5, 0x89, 0x9d, 0x4a, 0x79, 0x10, 0x9e, 0x8d, 0xd7, 0x41, 0xfe, 0x21, 0x49, 0xd5, 0x6e, 0xc9,
	0xb9, 0x27, 0x5f, 0xce, 0xb9, 0x36, 0x24, 0x1f, 0xbc, 0x44, 0x26, 0x24, 0xc7, 0x6a, 0x2e, 0x2b,
	0xa1, 0x05, 0x81, 0x4e, 0xa1, 0x3f, 0x01, 0x44, 0x0b, 0x21, 0x9b, 0x1c, 0xbf, 0x6b, 0x54, 0x9a,
	0x9c, 0x02, 0xf0, 0x95, 0xac, 0x75, 0x61, 0x3c, 0x69, 0x30, 0x0b, 0xae, 0x46, 0xf9, 0xc8, 0x2a,
	0x2f, 0xbc, 0x44, 0x72, 0x0e, 0xb1, 0x1b, 0x2b, 0xac, 0xd6, 0x58, 0xa5, 0xfb, 0xd6, 0x10, 0x59,
	0xed, 0xd5, 0x4a, 0xe4, 0x0c, 0x22, 0x51, 0xeb, 0x16, 0x11, 0x5a, 0x07, 0x38, 0xc9, 0x32, 0x2e,
	0x60, 0xec, 0x0d, 0x1e, 0x32, 0xb0, 0x96, 0xd8, 0x89, 0x8e, 0x42, 0xef, 0x20, 0x76, 0xb1, 0x94,
	0x14, 0x2b, 0x85, 0xe4, 0x12, 0x26, 0x5f, 0xbc, 0x2c, 0xb9, 0x2a, 0xb4, 0x28, 0x98, 0x90, 0x8d,
	0xcd, 0x16, 0xe6, 0xb1, 0x53, 0xdf, 0x84, 0x71, 0xd3, 0x7b, 0x80, 0x25, 0xb6, 0x5d, 0x12, 0x08,
	0x3f, 0xb1, 0xf1, 0x25, 0xcc, 0x23, 0x39, 0x86, 0xe1, 0x46, 0x70, 0xff, 0x46, 0xc7, 0x10, 0xd9,
	0xef, 0xdc, 0xcf, 0x68, 0x02, 0x93, 0x27, 0xc6, 0x50, 0x6a, 0xe5, 0x51, 0xf4, 0x1a, 0x0e, 0x5b,
	0xc5, 0x27, 0xea, 0x58, 0xc1, 0x2c, 0xec, 0x58, 0x37, 0xbf, 0x01, 0x1c, 0x99, 0x9e, 0x0b, 0xbb,
	0x60, 0x53, 0x87, 0x33, 0x24, 0x0f, 0x30, 0x30, 0x09, 0xc9, 0x74, 0xde, 0x3b, 0x8e, 0xde, 0xe2,
	0xb3, 0x74, 0x7b, 0xe0, 0xd3, 0xec, 0x91, 0x47, 0x80, 0x1c, 0x19, 0xf2, 0x35, 0x2e, 0x4d, 0x89,
	0xbe, 0xb3, 0xab, 0x9b, 0x4d, 0xb7, 0xf4, 0x16, 0xf0, 0x0c, 0x07, 0x3e, 0x3e, 0xc9, 0xfa, 0xae,
	0xcd, 0x96, 0xd9, 0xc9, 0xce, 0xd9, 0x3f, 0xe5, 0x7d, 0x68, 0xaf, 0xcf, 0xed, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x9f, 0x0c, 0x4c, 0x61, 0x52, 0x02, 0x00, 0x00,
}
