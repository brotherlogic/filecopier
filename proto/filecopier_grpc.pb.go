// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FileCopierServiceClient is the client API for FileCopierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileCopierServiceClient interface {
	DirCopy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	QueueCopy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	ReceiveKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
	Accepts(ctx context.Context, in *AcceptsRequest, opts ...grpc.CallOption) (*AcceptsResponse, error)
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error)
}

type fileCopierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileCopierServiceClient(cc grpc.ClientConnInterface) FileCopierServiceClient {
	return &fileCopierServiceClient{cc}
}

func (c *fileCopierServiceClient) DirCopy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierService/DirCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) QueueCopy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierService/QueueCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierService/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) ReceiveKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierService/ReceiveKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) Accepts(ctx context.Context, in *AcceptsRequest, opts ...grpc.CallOption) (*AcceptsResponse, error) {
	out := new(AcceptsResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierService/Accepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCopierServiceClient) Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error) {
	out := new(ReplicateResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierService/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileCopierServiceServer is the server API for FileCopierService service.
// All implementations should embed UnimplementedFileCopierServiceServer
// for forward compatibility
type FileCopierServiceServer interface {
	DirCopy(context.Context, *CopyRequest) (*CopyResponse, error)
	QueueCopy(context.Context, *CopyRequest) (*CopyResponse, error)
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	ReceiveKey(context.Context, *KeyRequest) (*KeyResponse, error)
	Accepts(context.Context, *AcceptsRequest) (*AcceptsResponse, error)
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	Replicate(context.Context, *ReplicateRequest) (*ReplicateResponse, error)
}

// UnimplementedFileCopierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFileCopierServiceServer struct {
}

func (UnimplementedFileCopierServiceServer) DirCopy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirCopy not implemented")
}
func (UnimplementedFileCopierServiceServer) QueueCopy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCopy not implemented")
}
func (UnimplementedFileCopierServiceServer) Copy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFileCopierServiceServer) ReceiveKey(context.Context, *KeyRequest) (*KeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveKey not implemented")
}
func (UnimplementedFileCopierServiceServer) Accepts(context.Context, *AcceptsRequest) (*AcceptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accepts not implemented")
}
func (UnimplementedFileCopierServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedFileCopierServiceServer) Replicate(context.Context, *ReplicateRequest) (*ReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}

// UnsafeFileCopierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileCopierServiceServer will
// result in compilation errors.
type UnsafeFileCopierServiceServer interface {
	mustEmbedUnimplementedFileCopierServiceServer()
}

func RegisterFileCopierServiceServer(s grpc.ServiceRegistrar, srv FileCopierServiceServer) {
	s.RegisterService(&_FileCopierService_serviceDesc, srv)
}

func _FileCopierService_DirCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).DirCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/DirCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).DirCopy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_QueueCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).QueueCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/QueueCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).QueueCopy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_ReceiveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).ReceiveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/ReceiveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).ReceiveKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_Accepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).Accepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/Accepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).Accepts(ctx, req.(*AcceptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileCopierService_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierServiceServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierService/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierServiceServer).Replicate(ctx, req.(*ReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileCopierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filecopier.FileCopierService",
	HandlerType: (*FileCopierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DirCopy",
			Handler:    _FileCopierService_DirCopy_Handler,
		},
		{
			MethodName: "QueueCopy",
			Handler:    _FileCopierService_QueueCopy_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FileCopierService_Copy_Handler,
		},
		{
			MethodName: "ReceiveKey",
			Handler:    _FileCopierService_ReceiveKey_Handler,
		},
		{
			MethodName: "Accepts",
			Handler:    _FileCopierService_Accepts_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _FileCopierService_Exists_Handler,
		},
		{
			MethodName: "Replicate",
			Handler:    _FileCopierService_Replicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecopier.proto",
}

// FileCopierCallbackClient is the client API for FileCopierCallback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileCopierCallbackClient interface {
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error)
}

type fileCopierCallbackClient struct {
	cc grpc.ClientConnInterface
}

func NewFileCopierCallbackClient(cc grpc.ClientConnInterface) FileCopierCallbackClient {
	return &fileCopierCallbackClient{cc}
}

func (c *fileCopierCallbackClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error) {
	out := new(CallbackResponse)
	err := c.cc.Invoke(ctx, "/filecopier.FileCopierCallback/Callback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileCopierCallbackServer is the server API for FileCopierCallback service.
// All implementations should embed UnimplementedFileCopierCallbackServer
// for forward compatibility
type FileCopierCallbackServer interface {
	Callback(context.Context, *CallbackRequest) (*CallbackResponse, error)
}

// UnimplementedFileCopierCallbackServer should be embedded to have forward compatible implementations.
type UnimplementedFileCopierCallbackServer struct {
}

func (UnimplementedFileCopierCallbackServer) Callback(context.Context, *CallbackRequest) (*CallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}

// UnsafeFileCopierCallbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileCopierCallbackServer will
// result in compilation errors.
type UnsafeFileCopierCallbackServer interface {
	mustEmbedUnimplementedFileCopierCallbackServer()
}

func RegisterFileCopierCallbackServer(s grpc.ServiceRegistrar, srv FileCopierCallbackServer) {
	s.RegisterService(&_FileCopierCallback_serviceDesc, srv)
}

func _FileCopierCallback_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileCopierCallbackServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filecopier.FileCopierCallback/Callback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileCopierCallbackServer).Callback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileCopierCallback_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filecopier.FileCopierCallback",
	HandlerType: (*FileCopierCallbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Callback",
			Handler:    _FileCopierCallback_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecopier.proto",
}
